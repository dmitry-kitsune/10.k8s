name: Check Pod Status and Notify Slack

on:
  schedule:
    - cron: '*/30 * * * *'  # Runs every 30 minutes
  workflow_dispatch:  # Allows manual triggering of the workflow

jobs:
  check-pods:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      # Check for failed pods in K3S cluster
      - name: Check for failed pods in K3S cluster
        id: check_pods_k3s
        uses: appleboy/ssh-action@v1.1.0
        with:
          proxy_host: ${{ secrets.JUMPHOST_IP }}
          proxy_port: ${{ secrets.JUMPHOST_PORT }}
          proxy_username: ${{ secrets.JUMPHOST_USER }}
          proxy_password: ${{ secrets.JUMPHOST_PASS }}
          host: ${{ secrets.K3S_SERVER_IP }}
          username: ${{ secrets.KS_SERVER_USER }}
          password: ${{ secrets.KS_SERVER_PASS }}
          script: |
            # Ensure jq is installed
            if ! command -v jq &> /dev/null; then
              sudo apt-get update && sudo apt-get install -y jq
            fi

            # Set up kubeconfig for K3S
            mkdir -p ~/.kube
            echo "${{ secrets.KUBECONFIG_K3S }}" > ~/.kube/config
            export KUBECONFIG=~/.kube/config

            # Show pod statuses and save to STATUS_ARRAY_K3S
            STATUS_ARRAY_K3S=$(kubectl get pods -A)
            echo "$STATUS_ARRAY_K3S"

            # Check if STATUS_ARRAY_K3S contains "Error"
            if echo "$STATUS_ARRAY_K3S" | grep -q "Error"; then
              STATUS_ERROR_FOUND="true"
            else
              STATUS_ERROR_FOUND="false"
            fi
            
            # Check for failed pods and save to FAILED_PODS_K3S
            FAILED_PODS_K3S=$(kubectl get pods -A --field-selector=status.phase!=Running,status.phase!=Succeeded -o json | jq -r '.items[] | "\(.metadata.namespace)/\(.metadata.name) - \(.status.phase) - \(.status.containerStatuses[0].state.waiting.reason // "N/A")"')
            if [ -z "$FAILED_PODS_K3S" ]; then
              echo "No failed pods found in K3S."
              echo "FAILED_PODS_K3S=No failed pods in K3S" >> "${GITHUB_ENV:-/dev/null}"
            else
              echo "FAILED_PODS_K3S=$FAILED_PODS_K3S" >> "${GITHUB_ENV:-/dev/null}"
            fi

      # Check for failed pods in K8S cluster
      - name: Check for failed pods in K8S cluster
        id: check_pods_k8s
        uses: appleboy/ssh-action@v1.1.0
        with:
          proxy_host: ${{ secrets.JUMPHOST_IP }}
          proxy_port: ${{ secrets.JUMPHOST_PORT }}
          proxy_username: ${{ secrets.JUMPHOST_USER }}
          proxy_password: ${{ secrets.JUMPHOST_PASS }}
          host: ${{ secrets.K8S_SERVER_IP }}
          username: ${{ secrets.KS_SERVER_USER }}
          password: ${{ secrets.KS_SERVER_PASS }}
          script: |
            # Ensure jq is installed
            if ! command -v jq &> /dev/null; then
              sudo apt-get update && sudo apt-get install -y jq
            fi

            # Set up kubeconfig for K8S
            mkdir -p ~/.kube
            echo "${{ secrets.KUBECONFIG_K8S }}" > ~/.kube/config
            export KUBECONFIG=~/.kube/config

            # Show pod statuses and save to STATUS_ARRAY_K8S
            STATUS_ARRAY_K8S=$(kubectl get pods -A)
            echo "$STATUS_ARRAY_K8S"

            # Check if STATUS_ARRAY_K8S contains "Error"
            if echo "$STATUS_ARRAY_K8S" | grep -q "Error"; then
              STATUS_K8S_ERROR_FOUND="true"
            else
              STATUS_K8S_ERROR_FOUND="false"
            fi
            
            # Check for failed pods and save to FAILED_PODS_K8S if an error is found
            if [ "$STATUS_K8S_ERROR_FOUND" == "true" ]; then
              FAILED_PODS_K8S=$(kubectl get pods -A -o json | jq -r '.items[] | "\(.metadata.namespace)/\(.metadata.name) - \(.status.phase) - \(.status.containerStatuses[0].state.waiting.reason // "N/A")"')
            else
              FAILED_PODS_K8S="No failed pods in K8S"
            fi

            # Store the result in GitHub environment
            echo "FAILED_PODS_K8S=$FAILED_PODS_K8S" >> "${GITHUB_ENV:-/dev/null}"

      # Combine Error Pods Output
      - name: Combine Error Pods Output
        run: |
          ERROR_PODS_K3S="${{ env.FAILED_PODS_K3S }}"
          ERROR_PODS_K8S="${{ env.FAILED_PODS_K8S }}"
          
          if [[ "$ERROR_PODS_K3S" != "No failed pods in K3S" || "$ERROR_PODS_K8S" != "No failed pods in K8S" ]]; then
            ERROR_PODS="$ERROR_PODS_K3S"$'\n'"$ERROR_PODS_K8S"
          else
            ERROR_PODS="No Error pods in K3S or K8S"
          fi

          echo "ERROR_PODS=$ERROR_PODS" >> $GITHUB_ENV

      # Send Slack Notification for Pods with Error Status
      - name: Send Slack Notification for Pods with Error Status
        if: env.ERROR_PODS != 'No Error pods in K3S or K8S'  # Check if ERROR_PODS is not the default message
        uses: slackapi/slack-github-action@v1.23.0
        with:
          payload: |
            {
              "attachments": [
                {
                  "fallback": "Attention: The following pods are in Error state.",
                  "pretext": "Attention: The following pods are in Error state.",
                  "color": "#D00000",
                  "fields": [
                    {
                      "title": "Error Pods",
                      "value": "```${{ env.ERROR_PODS }}```",  // Ensures the pod list appears in a code block
                      "short": false
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK

      # Send Slack Notification for Successful Status
      - name: Send Slack Notification for Successful Status
        if: env.ERROR_PODS == 'No Error pods in K3S or K8S'  # Check if ERROR_PODS is the default message
        uses: slackapi/slack-github-action@v1.23.0
        with:
          payload: |
            {
              "attachments": [
                {
                  "fallback": "Good News: All pods are running smoothly.",
                  "pretext": "Good News: All pods are running smoothly.",
                  "color": "#36A64F",
                  "fields": [
                    {
                      "title": "Status",
                      "value": "All pods are running smoothly.",
                      "short": false
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
