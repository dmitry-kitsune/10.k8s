name: Check Pod Status and Notify Slack

on:
  #schedule:
  #  - cron: '*/30 * * * *'  # Runs every 30 minutes
  workflow_dispatch:  # Allows manual triggering of the workflow
  
env:
  # TEMP_ENV_FILE_PATH_K3S: ./temp_env_file_k3s.txt  # Define K3S environment file path once
  TEMP_ENV_FILE_PATH_K8S: ./temp_env_file_k8s.txt  # Define K8S environment file path once

jobs:
  check-pods:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      # Prepare environment variables for K8S
      - name: Prepare Environment Variables for K3S
        run: |
          # Clear the file before adding new variables (one file for both)
          : > ~/temp_env_file_k8s.txt  # Truncate or clear the file
          echo "GITHUB_ENV=${GITHUB_ENV}" > ~/temp_env_file_k8s.txt
          echo "STATE_ENV_K3S=FALSE" >> ~/temp_env_file_k8s.txt
          echo "FAILED_PODS_K3S=No failed pods in K3S" >> ~/temp_env_file_k8s.txt

      # Check for failed pods in K3S cluster
      - name: Check for failed pods in K3S cluster
        id: check_pods_k3s
        uses: appleboy/ssh-action@v1.1.0
        with:
          proxy_host: ${{ secrets.JUMPHOST_IP }}
          proxy_port: ${{ secrets.JUMPHOST_PORT }}
          proxy_username: ${{ secrets.JUMPHOST_USER }}
          proxy_password: ${{ secrets.JUMPHOST_PASS }}
          host: ${{ secrets.K3S_SERVER_IP }}
          username: ${{ secrets.KS_SERVER_USER }}
          password: ${{ secrets.KS_SERVER_PASS }}
          script: |
            # Ensure jq is installed
            if ! command -v jq &> /dev/null; then
              sudo apt-get update && sudo apt-get install -y jq
            fi

            # Source the temp file to get GITHUB_ENV
            # source temp_env_file.txt
            
            # Set up kubeconfig for K3S
            mkdir -p ~/.kube
            echo "${{ secrets.KUBECONFIG_K3S }}" > ~/.kube/config
            export KUBECONFIG=~/.kube/config

            # Initialize state variables
            TEMP_ENV_FILE=~/temp_env_file_k3s.txt  # Temporary file to store environment variables
            echo "" > $TEMP_ENV_FILE  # Clear the temp file if it exists
            STATUS="Error"
            FAILED_PODS=""
            
            # Get the pod statuses and print them
            STATUS_ARRAY_K3S=$(kubectl get pods -A)
            ERROR_ARRAY_K3S=$(kubectl get pods -A | grep -iE "$STATUS")
            echo "$STATUS_ARRAY_K3S"
            echo "DEBUG for ERROR_ARRAY_K3S"
            echo "$ERROR_ARRAY_K3S"

            # Check for errors
            if [[ -z "$ERROR_ARRAY_K3S" ]]; then
              echo "No failed pods found in K3S"
              echo "STATE_ENV_K3S=FALSE" >> ~/temp_env_file_k8s.txt
              echo "FAILED_PODS_K3S=No failed pods in K3S" >> ~/temp_env_file_k8s.txt
            else
              echo "Failed pods found in K3S!"
              FAILED_PODS=$(echo "$STATUS_ARRAY_K3S" | grep -i "Error" | tr '\n' ';' | sed 's/;$/;/' )
              echo "STATE_ENV_K3S=TRUE" >> ~/temp_env_file_k8s.txt
              echo "FAILED_PODS_K3S=$FAILED_PODS" >> ~/temp_env_file_k8s.txt
            fi

            # Print the contents for debugging
            cat ~/temp_env_file_k8s.txt

      # Upload Variable File as Artifact for K3S
      #- name: Upload Variable File as Artifact for K3S
      #  uses: actions/upload-artifact@v4
      #  with:
      #    name: k3s_variable_file
      #    path: ~/temp_env_file_k3s.txt

      # Prepare environment variables for K8S
      - name: Prepare Environment Variables for K8S
        run: |
          # echo "GITHUB_ENV=${GITHUB_ENV}" > ~/temp_env_file_k8s.txt
          echo "STATE_ENV_K8S=FALSE" >> ~/temp_env_file_k8s.txt
          echo "FAILED_PODS_K8S=No failed pods in K8S" >> ~/temp_env_file_k8s.txt

      # Check for failed pods in K8S cluster
      - name: Check for failed pods in K8S cluster
        id: check_pods_k8s
        uses: appleboy/ssh-action@v1.1.0
        with:
          proxy_host: ${{ secrets.JUMPHOST_IP }}
          proxy_port: ${{ secrets.JUMPHOST_PORT }}
          proxy_username: ${{ secrets.JUMPHOST_USER }}
          proxy_password: ${{ secrets.JUMPHOST_PASS }}
          host: ${{ secrets.K8S_SERVER_IP }}
          username: ${{ secrets.KS_SERVER_USER }}
          password: ${{ secrets.KS_SERVER_PASS }}
       #   env: GITHUB_ENV=${{ github.environment }}  # Pass GITHUB_ENV directly
          script: |
            # source temp_env_file.txt  # Load the environment variable from the temp file
            
            # Ensure jq is installed
            if ! command -v jq &> /dev/null; then
              sudo apt-get update && sudo apt-get install -y jq
            fi

            # Set up kubeconfig for K8S
            mkdir -p ~/.kube
            echo "${{ secrets.KUBECONFIG_K8S }}" > ~/.kube/config
            export KUBECONFIG=~/.kube/config

            # Initialize state variables
            TEMP_ENV_FILE=~/temp_env_file_k8s.txt  # Temporary file to store environment variables
            echo "" > $TEMP_ENV_FILE  # Clear the temp file if it exists
            STATUS="Error"
            FAILED_PODS=""
            
            # Get the pod statuses and print them for k8s
            STATUS_ARRAY_K8S=$(kubectl get pods -A)
            ERROR_ARRAY_K8S=$(kubectl get pods -A | grep -iE "$STATUS")
            echo "$STATUS_ARRAY_K8S"
            echo "DEBUG for ERROR_ARRAY_K8S"
            echo "$ERROR_ARRAY_K8S"

            # Check for errors
            if [[ -z "$ERROR_ARRAY_K8S" ]]; then
              echo "No failed pods found in K8S"
              echo "STATE_ENV_K8S=FALSE" >> ~/temp_env_file_k8s.txt
              echo "FAILED_PODS_K8S=No failed pods in K8S" >> ~/temp_env_file_k8s.txt
            else
              echo "Failed pods found in K8S!"
              FAILED_PODS=$(echo "$STATUS_ARRAY_K8S" | grep -i "Error" | tr '\n' ';' | sed 's/;$/;/' )
              echo "STATE_ENV_K8S=TRUE" >> ~/temp_env_file_k8s.txt
              echo "FAILED_PODS_K8S=$FAILED_PODS" >> ~/temp_env_file_k8s.txt
            fi
            
            # Print the contents for debugging
            cat ~/temp_env_file_k8s.txt

      # Step to load environment variables from the temporary file
      # Upload Variable File as Artifact for K3S
      - name: Upload Variable File as Artifact for K8S
        uses: actions/upload-artifact@v4
        with:
          name: k8s_variable_file
          path: ~/temp_env_file_k8s.txt

       ################################################################## end of first job  ##################################################


  send-slack-notification:
    runs-on: ubuntu-latest
    needs: check-pods  # Ensure this job runs after 'check-pods'
    env:
      # TEMP_ENV_FILE_PATH_K3S: ./temp_env_file_k3s.txt  # Define K3S environment file path once
      TEMP_ENV_FILE_PATH_K8S: ./temp_env_file_k8s.txt  # Define K8S environment file path once
    steps:

      # Download Variable File Artifact for K3S
      - name: Download Variable File Artifact for K3S and K8S
        uses: actions/download-artifact@v4
        with:
          name: k8s_variable_file
          path: .

      # Load Environment Variables from Downloaded File
      - name: Load Environment Variables from Downloaded File
        run: |
          TEMP_ENV_FILE=$(cat ~/temp_env_file_k8s.txt)   # should match the download path
          echo "TEMP_ENV_FILE"
          if [[ -f $TEMP_ENV_FILE ]]; then
          echo "STATE_ENV_K3S: ${{ env.STATE_ENV_K3S }}"
          echo "FAILED_PODS_K3S: ${{ env.FAILED_PODS_K3S  }}"
          echo "STATE_ENV_K8S: ${{ env.STATE_ENV_K8S }}"
          echo "FAILED_PODS_K8S: ${{ env.FAILED_PODS_K8S }}"
          else
            echo "Temporary file for K3S and K8S not found!"
          fi

      # Step to demonstrate that the variables are loaded
      #- name: Show Loaded Variables
      #  run: |
      #    echo "STATE_ENV_K3S: ${{ env.STATE_ENV_K3S }}"
      #    echo "FAILED_PODS_K3S: ${{ env.FAILED_PODS_K3S }}"
          
 # For K3S claster

      - name: Send Slack Notification for K3S Error Pods
        if: env.STATE_ENV_K3S == 'TRUE'
        uses: slackapi/slack-github-action@v1.27.0
        with:
          payload: |
            {
              "attachments": [
                {
                  "fallback": "Attention: The following pods in K3S are in Error state.",
                  "pretext": "Attention: The following pods in K3S are in Error state.",
                  "color": "#D00000",
                  "fields": [
                    {
                      "title": "K3S Error Pods",
                      "value": "${{ env.FAILED_PODS_K3S }}",
                      "short": false
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
          SLACK_USERNAME: KuberCluster

      # Send Slack Notification for K3S Successful Status
      - name: Send Slack Notification for K3S Successful Status
        # if: env.FAILED_PODS_K3S == 'No failed pods in K3S'
        # if: steps.check_pods_k3s.outputs.state_env_k3s == 'FALSE'
        if: env.STATE_ENV_K3S == 'FALSE'
        uses: slackapi/slack-github-action@v1.27.0
        with:
          payload: |
            {
              "attachments": [
                {
                  "fallback": "Good News: All pods are running smoothly in K3S.",
                  "pretext": "Good News: All pods are running smoothly in K3S.",
                  "color": "#36A64F",
                  "fields": [
                    {
                      "title": "K3S Status",
                      "value": "All pods are running smoothly in K3S.",
                      "short": false
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
          SLACK_USERNAME: KuberCluster 

# For k8s classter


      # Download Variable File Artifact for K8S
      #- name: Download Variable File Artifact for K8S
      #  uses: actions/download-artifact@v4
      #  with:
      #    name: k8s_variable_file
      #    path: ${{ env.TEMP_ENV_FILE_PATH_K8S }}

       # Load Environment Variables from Downloaded File
      - name: Load Environment Variables from Downloaded File
        run: |
          TEMP_ENV_FILE="${{ env.TEMP_ENV_FILE_PATH_K8S }}"   # should match the download path
          if [[ -f $TEMP_ENV_FILE ]]; then
            echo "Loading K8S environment variables..."
            while IFS= read -r line; do
              echo "$line" >> $GITHUB_ENV
            done < $TEMP_ENV_FILE
          else
            echo "Temporary file for K3S not found!"
          fi

      # Step to demonstrate that the variables are loaded
      #- name: Show Loaded Variables
      #  run: |
      #    echo "STATE_ENV_K8S: ${{ env.STATE_ENV_K8S }}"
      #    echo "FAILED_PODS_K8S: ${{ env.FAILED_PODS_K8S }}"

      # Send Slack Notification for K8S Error Pods
      - name: Send Slack Notification for K8S Error Pods
        # if: steps.check_pods_k8s.outputs.state_env_k8s == 'TRUE'
        if: env.STATE_ENV_K8S == 'TRUE'
        uses: slackapi/slack-github-action@v1.27.0
        with:
          payload: |
            {
              "attachments": [
                {
                  "fallback": "Attention: The following pods in K8S are in Error state.",
                  "pretext": "Attention: The following pods in K8S are in Error state.",
                  "color": "#D00000",
                  "fields": [
                    {
                      "title": "K8S Error Pods",
                      "value": "${{ env.FAILED_PODS_K8S }}",
                      "short": false
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
          SLACK_USERNAME: KuberCluster

      # Send Slack Notification for K8S Successful Status
      - name: Send Slack Notification for K8S Successful Status
        # if: steps.check_pods_k8s.outputs.state_env_k8s == 'FALSE'
        if: env.STATE_ENV_K8S == 'FALSE'
        uses: slackapi/slack-github-action@v1.27.0
        with:
          payload: |
            {
              "attachments": [
                {
                  "fallback": "Good News: All pods are running smoothly in K8S.",
                  "pretext": "Good News: All pods are running smoothly in K8S.",
                  "color": "#36A64F",
                  "fields": [
                    {
                      "title": "K8S Status",
                      "value": "All pods are running smoothly in K8S.",
                      "short": false
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
          SLACK_USERNAME: KuberCluster
