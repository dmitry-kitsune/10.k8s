name: Check Pod Status and Notify Slack

on:
  schedule:
    - cron: '*/30 * * * *'  # Runs every 30 minutes
  workflow_dispatch:  # Allows manual triggering of the workflow

jobs:
  check-pods:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Check for failed pods in K3S cluster
        id: check_pods_k3s
        uses: appleboy/ssh-action@v1.1.0
        with:
          proxy_host: ${{ secrets.JUMPHOST_IP }}
          proxy_port: ${{ secrets.JUMPHOST_PORT }}
          proxy_username: ${{ secrets.JUMPHOST_USER }}
          proxy_password: ${{ secrets.JUMPHOST_PASS }}
          host: ${{ secrets.K3S_SERVER_IP }}
          username: ${{ secrets.KS_SERVER_USER }}
          password: ${{ secrets.KS_SERVER_PASS }}
          script: |
            # Ensure jq is installed
            if ! command -v jq &> /dev/null; then
              sudo apt-get update && sudo apt-get install -y jq
            fi

            # Set up kubeconfig for K3S
            mkdir -p ~/.kube
            echo "${{ secrets.KUBECONFIG_K3S }}" > ~/.kube/config
            export KUBECONFIG=~/.kube/config

            # Show pod statuses and save to STATUS_ARRAY_K3S
            STATUS_ARRAY_K3S=$(kubectl get pods -A | sed -n '2,$p' | awk '{print $2, $4}')
            if [[ -n "$STATUS_ARRAY_K8S" ]]; then
              echo "STATUS_ARRAY_K3S=$STATUS_ARRAY_K3S" >> "${GITHUB_ENV:-/dev/null}"
            else
              echo "STATUS_ARRAY_K3S=No status information found" >> "${GITHUB_ENV:-/dev/null}"
            fi

            # Check for failed pods and save to FAILED_PODS_K3S
            FAILED_PODS_K3S=$(kubectl get pods -A --field-selector=status.phase!=Running,status.phase!=Succeeded -o json | jq -r '.items[] | "\(.metadata.namespace)/\(.metadata.name) - \(.status.phase) - \(.status.containerStatuses[0].state.waiting.reason // "N/A")"')
            if [[ "$STATUS_ARRAY_K3S" =~ "Error" ]]; then
              echo "No failed pods found in K3S."
              echo "FAILED_PODS_K3S=No failed pods in K3S" >> "${GITHUB_ENV:-/dev/null}"
            else
              echo "FAILED_PODS_K3S=$FAILED_PODS_K3S" >> "${GITHUB_ENV:-/dev/null}"
            fi

      - name: Check for failed pods in K8S cluster
        id: check_pods_k8s
        uses: appleboy/ssh-action@v1.1.0
        with:
          proxy_host: ${{ secrets.JUMPHOST_IP }}
          proxy_port: ${{ secrets.JUMPHOST_PORT }}
          proxy_username: ${{ secrets.JUMPHOST_USER }}
          proxy_password: ${{ secrets.JUMPHOST_PASS }}
          host: ${{ secrets.K8S_SERVER_IP }}
          username: ${{ secrets.KS_SERVER_USER }}
          password: ${{ secrets.KS_SERVER_PASS }}
          script: |
            # Ensure jq is installed
            if ! command -v jq &> /dev/null; then
              sudo apt-get update && sudo apt-get install -y jq
            fi

            # Set up kubeconfig for K8S
            mkdir -p ~/.kube
            echo "${{ secrets.KUBECONFIG_K8S }}" > ~/.kube/config
            export KUBECONFIG=~/.kube/config

            # Show pod statuses and save to STATUS_ARRAY_K8S
            STATUS_ARRAY_K8S=$(kubectl get pods -A | sed -n '2,$p' | awk '{print $2, $4}')
            if [[ -n "$STATUS_ARRAY_K8S" ]]; then
              echo "STATUS_ARRAY_K8S=$STATUS_ARRAY_K8S" >> "${GITHUB_ENV:-/dev/null}"
            else
              echo "STATUS_ARRAY_K8S=No status information found" >> "${GITHUB_ENV:-/dev/null}"
            fi

            # Check for failed pods and save to FAILED_PODS_K8S
            FAILED_PODS_K8S=$(kubectl get pods -A --field-selector=status.phase!=Running,status.phase!=Succeeded -o json | jq -r '.items[] | "\(.metadata.namespace)/\(.metadata.name) - \(.status.phase) - \(.status.containerStatuses[0].state.waiting.reason // "N/A")"')
            if [[ "$STATUS_ARRAY_K3S" =~ "Error" ]]; then
              echo "No failed pods found in K8S."
              echo "FAILED_PODS_K8S=No failed pods in K8S" >> "${GITHUB_ENV:-/dev/null}"
            else
              echo "FAILED_PODS_K8S=$FAILED_PODS_K8S" >> "${GITHUB_ENV:-/dev/null}"
            fi

      - name: Combine Failed Pods Output
        run: |
          if [[ "$FAILED_PODS_K3S" != "No failed pods in K3S" || "$FAILED_PODS_K8S" != "No failed pods in K8S" ]]; then
            FAILED_PODS="$FAILED_PODS_K3S"$'\n'"$FAILED_PODS_K8S"
          else
            FAILED_PODS=""
          fi
          echo "FAILED_PODS=$FAILED_PODS" >> "${GITHUB_ENV:-/dev/null}"
          
      - name: Send Slack Notification for Failed Pods
        if: env.FAILED_PODS != ''  # Check if FAILED_PODS is not empty
        uses: slackapi/slack-github-action@v1.23.0
        with:
          payload: |
            {
              "channel": "${{ secrets.SLACK_CHANNEL }}",
              "username": "K8s Pod Monitor",
              "text": "*Attention:* The following pods are not in Running state:\n```${{ env.FAILED_PODS }}```",
              "icon_emoji": ":warning:"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK

      - name: Send Slack Notification for Successful Status
        if: env.FAILED_PODS == ''  # Check if FAILED_PODS is empty
        uses: slackapi/slack-github-action@v1.23.0
        with:
          payload: |
            {
              "channel": "${{ secrets.SLACK_CHANNEL }}",
              "username": "K8s Pod Monitor",
              "text": "*Good News:* All pods are running smoothly.",
              "icon_emoji": ":white_check_mark:"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
