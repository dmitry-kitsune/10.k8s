name: Check Pod Status and Notify Slack

on:
  schedule:
    - cron: '*/30 * * * *'  # Runs every 30 minutes
  workflow_dispatch:  # Allows manual triggering of the workflow

jobs:
  check-pods:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      # Check for failed pods in K3S cluster
      - name: Check for failed pods in K3S cluster
        id: check_pods_k3s
        uses: appleboy/ssh-action@v1.1.0
        with:
          proxy_host: ${{ secrets.JUMPHOST_IP }}
          proxy_port: ${{ secrets.JUMPHOST_PORT }}
          proxy_username: ${{ secrets.JUMPHOST_USER }}
          proxy_password: ${{ secrets.JUMPHOST_PASS }}
          host: ${{ secrets.K3S_SERVER_IP }}
          username: ${{ secrets.KS_SERVER_USER }}
          password: ${{ secrets.KS_SERVER_PASS }}
          script: |
            # Ensure jq is installed
            if ! command -v jq &> /dev/null; then
              sudo apt-get update && sudo apt-get install -y jq
            fi

            # Set up kubeconfig for K3S
            mkdir -p ~/.kube
            echo "${{ secrets.KUBECONFIG_K3S }}" > ~/.kube/config
            export KUBECONFIG=~/.kube/config

            # Show pod statuses and save to STATUS_ARRAY_K3S
            STATUS_ARRAY_K3S=$(kubectl get pods -A)
            echo "$STATUS_ARRAY_K3S"

            # Store the pod statuses in the GitHub environment using EOF
            echo "STATUS_ARRAY_K3S<<EOF" >> $GITHUB_ENV
            echo "$STATUS_ARRAY_K3S" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV

            # Define the status to check for
            STATUS="Error"

            # Check if any pod status contains "Error"
            if [[ ${STATUS_ARRAY_K3S[@]} =~ $STATUS ]] ; then
              echo "FAILED_PODS_K3S=$STATUS_ARRAY_K3S" >> "$GITHUB_ENV"
            else
              echo "FAILED_PODS_K3S=No failed pods in K3S" >> "$GITHUB_ENV"
            fi
            
            # print out for debugging
            echo "GITHUB_ENV is set to: $GITHUB_ENV"
            
            # Store the result in GitHub environment
            # echo "FAILED_PODS_K3S=$FAILED_PODS_K3S" >> "${GITHUB_ENV:-/dev/null}"


                  # Send Slack Notification for K3S Error Pods
      - name: Send Slack Notification for K3S Error Pods
        if: env.FAILED_PODS_K3S != 'No failed pods in K3S'  # Check if there are failed pods in K3S
        uses: slackapi/slack-github-action@v1.27.0
        with:
          payload: |
            {
              "attachments": [
                {
                  "fallback": "Attention: The following pods in K3S are in Error state.",
                  "pretext": "Attention: The following pods in K3S are in Error state.",
                  "color": "#D00000",
                  "fields": [
                    {
                      "title": "K3S Error Pods",
                      "value": "${{ env.FAILED_PODS_K3S }}",
                      "short": false
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK

      # Send Slack Notification for K8S Error Pods
      - name: Send Slack Notification for K8S Error Pods
        if: env.FAILED_PODS_K8S != 'No failed pods in K8S'  # Check if there are failed pods in K8S
        uses: slackapi/slack-github-action@v1.27.0
        with:
          payload: |
            {
              "attachments": [
                {
                  "fallback": "Attention: The following pods in K8S are in Error state.",
                  "pretext": "Attention: The following pods in K8S are in Error state.",
                  "color": "#D00000",
                  "fields": [
                    {
                      "title": "K8S Error Pods",
                      "value": "${{ env.FAILED_PODS_K8S }}",
                      "short": false
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK

      # Check for failed pods in K8S cluster
      - name: Check for failed pods in K8S cluster
        id: check_pods_k8s
        uses: appleboy/ssh-action@v1.1.0
        with:
          proxy_host: ${{ secrets.JUMPHOST_IP }}
          proxy_port: ${{ secrets.JUMPHOST_PORT }}
          proxy_username: ${{ secrets.JUMPHOST_USER }}
          proxy_password: ${{ secrets.JUMPHOST_PASS }}
          host: ${{ secrets.K8S_SERVER_IP }}
          username: ${{ secrets.KS_SERVER_USER }}
          password: ${{ secrets.KS_SERVER_PASS }}
          script: |
            # Ensure jq is installed
            if ! command -v jq &> /dev/null; then
              sudo apt-get update && sudo apt-get install -y jq
            fi

            # Set up kubeconfig for K8S
            mkdir -p ~/.kube
            echo "${{ secrets.KUBECONFIG_K8S }}" > ~/.kube/config
            export KUBECONFIG=~/.kube/config

            # Show pod statuses and save to STATUS_ARRAY_K8S
            STATUS_ARRAY_K8S=$(kubectl get pods -A)
            echo "$STATUS_ARRAY_K8S"

            # Store the pod statuses in the GitHub environment using EOF
            echo "STATUS_ARRAY_K8S<<EOF" >> $GITHUB_ENV
            echo "$STATUS_ARRAY_K8S" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV

            # Define the status to check for
            STATUS="Error"

            # Check if any pod status contains "Error"
            if [[ ${STATUS_ARRAY_K8S[@]} =~ $STATUS ]]; then
              echo "FAILED_PODS_K8S=$STATUS_ARRAY_K8S" >> "$GITHUB_ENV"
            else
              echo "FAILED_PODS_K3S=No failed pods in K8S" >> "$GITHUB_ENV"
            fi
            
            # print out for debugging
            echo "GITHUB_ENV is set to: $GITHUB_ENV"

            # Store the result in GitHub environment
            # echo "FAILED_PODS_K8S=$FAILED_PODS_K8S" >> "${GITHUB_ENV:-/dev/null}"
            
      # Send Slack Notification for K3S Successful Status
      - name: Send Slack Notification for K3S Successful Status
        if: env.FAILED_PODS_K3S == 'No failed pods in K3S'  # Check if there are no failed pods in K3S
        uses: slackapi/slack-github-action@v1.27.0
        with:
          payload: |
            {
              "attachments": [
                {
                  "fallback": "Good News: All pods are running smoothly in K3S.",
                  "pretext": "Good News: All pods are running smoothly in K3S.",
                  "color": "#36A64F",
                  "fields": [
                    {
                      "title": "K3S Status",
                      "value": "All pods are running smoothly in K3S.",
                      "short": false
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK

      # Send Slack Notification for K8S Successful Status
      - name: Send Slack Notification for K8S Successful Status
        if: env.FAILED_PODS_K8S == 'No failed pods in K8S'  # Check if there are no failed pods in K8S
        uses: slackapi/slack-github-action@v1.27.0
        with:
          payload: |
            {
              "attachments": [
                {
                  "fallback": "Good News: All pods are running smoothly in K8S.",
                  "pretext": "Good News: All pods are running smoothly in K8S.",
                  "color": "#36A64F",
                  "fields": [
                    {
                      "title": "K8S Status",
                      "value": "All pods are running smoothly in K8S.",
                      "short": false
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
