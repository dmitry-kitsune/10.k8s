name: Check Pod Status and Notify Slack

on:
  schedule:
    - cron: '*/30 * * * *'  # Runs every 30 minutes
  workflow_dispatch:  # Allows manual triggering of the workflow

jobs:
  check-pods:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
       # Prepare environment variables for K3S
      - name: Prepare Environment Variables for K3S
        run: echo "GITHUB_ENV=${GITHUB_ENV}" > temp_env_file.txt

      # Check for failed pods in K3S cluster
      - name: Check for failed pods in K3S cluster
        id: check_pods_k3s
        uses: appleboy/ssh-action@v1.1.0
        with:
          proxy_host: ${{ secrets.JUMPHOST_IP }}
          proxy_port: ${{ secrets.JUMPHOST_PORT }}
          proxy_username: ${{ secrets.JUMPHOST_USER }}
          proxy_password: ${{ secrets.JUMPHOST_PASS }}
          host: ${{ secrets.K3S_SERVER_IP }}
          username: ${{ secrets.KS_SERVER_USER }}
          password: ${{ secrets.KS_SERVER_PASS }}
          script: |
            # Ensure jq is installed
            if ! command -v jq &> /dev/null; then
              sudo apt-get update && sudo apt-get install -y jq
            fi

            # Source the temp file to get GITHUB_ENV
            # source temp_env_file.txt
            
            # Set up kubeconfig for K3S
            mkdir -p ~/.kube
            echo "${{ secrets.KUBECONFIG_K3S }}" > ~/.kube/config
            export KUBECONFIG=~/.kube/config

            # Initialize state variables
            TEMP_ENV_FILE=~/temp_env_file_k3s.txt  # Temporary file to store environment variables
            echo "" > $TEMP_ENV_FILE  # Clear the temp file if it exists
            STATUS="Error"
            FAILED_PODS=""
            
            # Get the pod statuses and print them
            STATUS_ARRAY_K3S=$(kubectl get pods -A)
            ERROR_ARRAY_K3S=$(kubectl get pods -A | grep -iE "$STATUS")
            echo "$STATUS_ARRAY_K3S"
            echo "DEBUG for ERROR_ARRAY_K3S"
            echo "$ERROR_ARRAY_K3S"

            # Check for errors
            if [[ -z "$ERROR_ARRAY_K3S" ]]; then
              echo "No failed pods found in K3S" >> $TEMP_ENV_FILE
              echo "STATE_ENV_K3S=FALSE" >> $TEMP_ENV_FILE
              echo "FAILED_PODS_K3S=No failed pods in K3S" >> $TEMP_ENV_FILE
            else
              echo "Failed pods found in K3S!" >> $TEMP_ENV_FILE
              FAILED_PODS=$(echo "$STATUS_ARRAY_K3S" | grep -i "Error" | tr '\n' ';' | sed 's/;$/;/' )
              echo "STATE_ENV_K3S=TRUE" >> $TEMP_ENV_FILE
              echo "FAILED_PODS_K3S=$FAILED_PODS" >> $TEMP_ENV_FILE
            fi

            # Print the contents for debugging
            cat $TEMP_ENV_FILE

            ## Check if ERROR_ARRAY_K3S contains "Error"
            #if [[ -z "$ERROR_ARRAY_K3S" ]]; then
            #  echo "No failed pods found in K3S"
            #  echo "::set-output name=state_env_k3s::FALSE"  # Set the output variable
            #  echo "::set-output name=failed_pods_k3s::No failed pods in K3S"  # Set the output variable
            #else
            #  echo "Failed pods found in K3S!"
            #  FAILED_PODS=$(echo "$STATUS_ARRAY_K3S" | grep -i "Error" | tr '\n' ';' | sed 's/;$/;/' )
            #  echo "::set-output name=state_env_k3s::TRUE"  # Set the output variable
            # echo "::set-output name=failed_pods_k3s::$FAILED_PODS"  # Set the output variable
            #fi
            
           # Capture output from the K3S check
      #- name: Set K3S Output Variables
      #  id: k3s_output
      #  run: |
      #    echo "::set-output name=state_env_k3s::${{ steps.check_pods_k3s.outputs.state_env_k3s }}"
      #    echo "::set-output name=failed_pods_k3s::${{ steps.check_pods_k3s.outputs.failed_pods_k3s }}"

      # Send Slack Notification for K3S Error Pods

      # Load Environment Variables from Temporary File
      - name: Load Environment Variables from Temporary File
        run: |
          if [[ -f ~/temp_env_file_k3s.txt ]]; then
            echo "Loading environment variables from temporary file..."
            while IFS= read -r line; do
              echo "$line" >> $GITHUB_ENV
            done < ~/temp_env_file_k3s.txt
          else
            echo "Temporary file not found!"
          fi
          
      - name: Send Slack Notification for K3S Error Pods
        if: env.STATE_ENV_K3S == 'TRUE'
        uses: slackapi/slack-github-action@v1.27.0
        with:
          payload: |
            {
              "attachments": [
                {
                  "fallback": "Attention: The following pods in K3S are in Error state.",
                  "pretext": "Attention: The following pods in K3S are in Error state.",
                  "color": "#D00000",
                  "fields": [
                    {
                      "title": "K3S Error Pods",
                      "value": "${{ env.FAILED_PODS_K3S }}",
                      "short": false
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
          SLACK_USERNAME: KuberCluster

      # Send Slack Notification for K3S Successful Status
      - name: Send Slack Notification for K3S Successful Status
        # if: env.FAILED_PODS_K3S == 'No failed pods in K3S'
        # if: steps.check_pods_k3s.outputs.state_env_k3s == 'FALSE'
        if: env.STATE_ENV_K3S == 'FALSE'
        uses: slackapi/slack-github-action@v1.27.0
        with:
          payload: |
            {
              "attachments": [
                {
                  "fallback": "Good News: All pods are running smoothly in K3S.",
                  "pretext": "Good News: All pods are running smoothly in K3S.",
                  "color": "#36A64F",
                  "fields": [
                    {
                      "title": "K3S Status",
                      "value": "All pods are running smoothly in K3S.",
                      "short": false
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
          SLACK_USERNAME: KuberCluster

      # Check for failed pods in K8S cluster
      - name: Check for failed pods in K8S cluster
        id: check_pods_k8s
        uses: appleboy/ssh-action@v1.1.0
        with:
          proxy_host: ${{ secrets.JUMPHOST_IP }}
          proxy_port: ${{ secrets.JUMPHOST_PORT }}
          proxy_username: ${{ secrets.JUMPHOST_USER }}
          proxy_password: ${{ secrets.JUMPHOST_PASS }}
          host: ${{ secrets.K8S_SERVER_IP }}
          username: ${{ secrets.KS_SERVER_USER }}
          password: ${{ secrets.KS_SERVER_PASS }}
       #   env: GITHUB_ENV=${{ github.environment }}  # Pass GITHUB_ENV directly
          script: |
            # source temp_env_file.txt  # Load the environment variable from the temp file
            
            # Ensure jq is installed
            if ! command -v jq &> /dev/null; then
              sudo apt-get update && sudo apt-get install -y jq
            fi

            # Set up kubeconfig for K8S
            mkdir -p ~/.kube
            echo "${{ secrets.KUBECONFIG_K8S }}" > ~/.kube/config
            export KUBECONFIG=~/.kube/config

            # Initialize state variables
            TEMP_ENV_FILE=~/temp_env_file_k8s.txt  # Temporary file to store environment variables
            echo "" > $TEMP_ENV_FILE  # Clear the temp file if it exists
            STATUS="Error"
            FAILED_PODS=""
            
            # Get the pod statuses and print them for k8s
            STATUS_ARRAY_K8S=$(kubectl get pods -A)
            ERROR_ARRAY_K8S=$(kubectl get pods -A | grep -iE "$STATUS")
            echo "$STATUS_ARRAY_K8S"
            echo "DEBUG for ERROR_ARRAY_K8S"
            echo "$ERROR_ARRAY_K8S"

            # Check for errors
            if [[ -z "$ERROR_ARRAY_K8S" ]]; then
              echo "No failed pods found in K8S" >> $TEMP_ENV_FILE
              echo "STATE_ENV_K8S=FALSE" >> $TEMP_ENV_FILE
              echo "FAILED_PODS_K8S=No failed pods in K8S" >> $TEMP_ENV_FILE
            else
              echo "Failed pods found in K8S!" >> $TEMP_ENV_FILE
              FAILED_PODS=$(echo "$STATUS_ARRAY_K8S" | grep -i "Error" | tr '\n' ';' | sed 's/;$/;/' )
              echo "STATE_ENV_K8S=TRUE" >> $TEMP_ENV_FILE
              echo "FAILED_PODS_K8S=$FAILED_PODS" >> $TEMP_ENV_FILE
            fi
            
            # Print the contents for debugging
            cat $TEMP_ENV_FILE

            # Check if ERROR_ARRAY_K8S contains "Error"
            #if [[ -z "$ERROR_ARRAY_K8S" ]]; then
            #   echo "No failed pods found in K8S"
            #    echo "::set-output name=state_env_k8s::FALSE"  # Set the output variable
            #    echo "::set-output name=failed_pods_k8s::No failed pods in K8S"  # Set the output variable
            #else
            #    echo "Failed pods found in K8S!"
            #    FAILED_PODS=$(echo "$STATUS_ARRAY_K8S" | grep -i "Error" | tr '\n' ';' | sed 's/;$/;/' )
            #    echo "::set-output name=state_env_k8s::TRUE"  # Set the output variable
            #    echo "::set-output name=failed_pods_k8s::$FAILED_PODS"  # Set the output variable
            #fi

      # Capture output from the K8S check
    #  - name: Set K8S Output Variables
    #    id: k8s_output
    #    run: |
    #      echo "::set-output name=state_env_k8s::${{ steps.check_pods_k8s.outputs.state_env_k8s }}"
    #      echo "::set-output name=failed_pods_k8s::${{ steps.check_pods_k8s.outputs.failed_pods_k8s }}"

     # Load Environment Variables from Temporary File
      - name: Load Environment Variables from Temporary File
        run: |
          if [[ -f ~/temp_env_file_k8s.txt ]]; then
            echo "Loading environment variables from temporary file..."
            while IFS= read -r line; do
              echo "$line" >> $GITHUB_ENV
            done < ~/temp_env_file_k8s.txt
          else
            echo "Temporary file not found!"
          fi
          
      # Send Slack Notification for K8S Error Pods
      - name: Send Slack Notification for K8S Error Pods
        # if: steps.check_pods_k8s.outputs.state_env_k8s == 'TRUE'
        if: env.STATE_ENV_K8S == 'TRUE'
        uses: slackapi/slack-github-action@v1.27.0
        with:
          payload: |
            {
              "attachments": [
                {
                  "fallback": "Attention: The following pods in K8S are in Error state.",
                  "pretext": "Attention: The following pods in K8S are in Error state.",
                  "color": "#D00000",
                  "fields": [
                    {
                      "title": "K8S Error Pods",
                      "value": "${{ env.FAILED_PODS_K8S }}",
                      "short": false
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
          SLACK_USERNAME: KuberCluster

      # Send Slack Notification for K8S Successful Status
      - name: Send Slack Notification for K8S Successful Status
        # if: steps.check_pods_k8s.outputs.state_env_k8s == 'FALSE'
        if: env.STATE_ENV_K8S == 'FALSE'
        uses: slackapi/slack-github-action@v1.27.0
        with:
          payload: |
            {
              "attachments": [
                {
                  "fallback": "Good News: All pods are running smoothly in K8S.",
                  "pretext": "Good News: All pods are running smoothly in K8S.",
                  "color": "#36A64F",
                  "fields": [
                    {
                      "title": "K8S Status",
                      "value": "All pods are running smoothly in K8S.",
                      "short": false
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
          SLACK_USERNAME: KuberCluster
